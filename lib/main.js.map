{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr.bind CND\nbadge                     = 'CUPOFJOE'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\n#...........................................................................................................\n@types                    = new ( require 'intertype' ).Intertype()\n{ isa\n  validate\n  type_of }               = @types.export()\n#...........................................................................................................\n{ jr }                    = CND\nMultimix                  = require 'multimix'\n\n#-----------------------------------------------------------------------------------------------------------\nremove_nulls_etc = ( list ) ->\n  return list.filter ( e ) -> e? ### mutating variant ###\n  # return ( e for e in list when e? ) ### non-mutating variant ###\n\n#-----------------------------------------------------------------------------------------------------------\n@expand = ->\n  @_expand @collector\n  @collector = @collector.flat Infinity if @settings.flatten\n  return @_unwrap @collector\n\n#-----------------------------------------------------------------------------------------------------------\n@expand_async = ->\n  await @_expand_async @collector\n  @collector = @collector.flat Infinity if @settings.flatten\n  return @_unwrap @collector\n\n#-----------------------------------------------------------------------------------------------------------\n@_expand = ( list ) ->\n  idx = -1\n  loop\n    idx++; break if idx > list.length - 1\n    #.......................................................................................................\n    unless ( x = list[ idx ] )?\n      list.splice idx, 1\n      idx--\n      continue\n    #.......................................................................................................\n    switch type = type_of x\n      #.....................................................................................................\n      when 'list'\n        ### remove nulls and undefined elements, skip empty lists ###\n        x = remove_nulls_etc x\n        if x.length is 0\n          list.splice idx, 1\n          idx--\n          continue\n        @_expand list[ idx ] = x\n      #.....................................................................................................\n      when 'function'\n        @target = []\n        x()\n        list[ idx .. idx ] = @target\n        idx--\n        continue\n      #.....................................................................................................\n      when 'asyncfunction'\n        throw new Error \"^coj/_expand@7767^ unable to use `expand` for async function; use `expand_async()` instead\"\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_expand_async = ( list ) ->\n  idx = -1\n  loop\n    idx++; break if idx > list.length - 1\n    unless ( x = list[ idx ] )? then list.splice idx, 1; idx--; continue\n    if ( type = type_of x ) is 'list'\n      if ( x = x.filter ( e ) -> e? ).length is 0 then list.splice idx, 1; idx--; continue\n      await @_expand_async list[ idx ] = x\n    else if type is 'function'        then @target = [];        x(); list[ idx .. idx ] = @target; idx--\n    else if type is 'asyncfunction'   then @target = []; await  x(); list[ idx .. idx ] = @target; idx--\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_unwrap = ( x ) ->\n  return x unless isa.list x\n  # x = x.filter ( e ) -> e? and not ( ( isa.list e ) and ( e.length is 0 ) )\n  return x unless x.length is 1\n  return x unless isa.list x[ 0 ]\n  return @_unwrap x[ 0 ]\n\n#-----------------------------------------------------------------------------------------------------------\n@cram = ( x... ) ->\n  @target.push x\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\nMAIN = @\nclass Cupofjoe extends Multimix\n  @include MAIN, { overwrite: false, }\n  # @extend MAIN, { overwrite: false, }\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( settings = null) ->\n    super()\n    @settings   = { { flatten: false, }..., settings..., }\n    @collector  = []\n    @target     = @collector\n    return @\n\n#-----------------------------------------------------------------------------------------------------------\nmodule.exports = { Cupofjoe, }\n\n\n############################################################################################################\nif module is require.main then do =>\n  null\n\n"
  ]
}